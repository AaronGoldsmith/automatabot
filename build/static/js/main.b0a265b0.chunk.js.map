{"version":3,"sources":["constants.js","components/GameBoard.js","actions.js","components/GameController.js","index.js","reducers/rootReducer.js"],"names":["GET_CHALLENGE","SET_PATH","SET_RESULT","Cell","_ref","alive","react_default","a","createElement","className","concat","CellGrid","_ref2","cells","map","cellList","i","row","key","cell","n","GameBoard_Cell","getNextBoard","challenge","Promise","resolve","_","getNextRow","Object","objectSpread","rules","birth","survival","aliveCount","getNeighbors","neighbor","x","y","filter","length","includes","col","neighbors","size","j","push","domain","path","headers","content-type","GameController","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSend","_this$state","state","url","sendGame","updateBoard","_this$state2","generation","then","gen","setState","tick","running","timer","setInterval","tock","ageToCompletion","_this$state3","handleRun","undefined","age","clearInterval","prevProps","prevState","Challenge","getGame","_this$state4","generations","Fragment","onClick","React","Component","connect","PATH","dispatch","axios","get","response","type","data","challengePath","catch","error","console","log","post","result","rootElement","document","getElementById","storeWithThunk","createStore","arguments","action","applyMiddleware","ReduxThunk","ReactDOM","render","react_redux_es","store","components_GameController"],"mappings":"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","file":"static/js/main.b0a265b0.chunk.js","sourcesContent":["import axios from \"axios\";\n// const headers = { \"content-type\": \"application/json\" };\n\nexport const axios_get = (url, headers) => axios.get(url, headers);\nexport const axios_post = (url, body, headers) =>\n  axios.post(url, body, headers);\n\nexport const GET_CHALLENGE = \"GET_BOARD\";\nexport const SET_PATH = \"SET_PATH\";\nexport const SET_RESULT = \"SET_RESULT\"","import React, {useEffect, useState, useCallBack} from \"react\";\n\nconst Cell = ({ alive }) => <div className={`cell ${alive ? \"o\" : \"x\"}`} />;\nconst CellRow = (cells, row) => {\n  return (\n    <div key={row} className={`cell-row row-${row}`}>\n      {cells.map((cell, n) => (\n        <Cell key={n} alive={cell} />\n      ))}\n    </div>\n  );\n};\nexport const CellGrid = ({cells}) =>{\n  return cells ? cells.map((cellList, i) => CellRow(cellList, i)) : null;\n};\n\n\nexport const getNextBoard = (challenge) => new Promise(resolve => {\n  const cellList = challenge.cells.map((_, row) => getNextRow(row, challenge));\n  const newBoard = { ...challenge, cells: cellList }\n  resolve(newBoard)\n})\n\nconst getNextRow = (n, challenge) => {\n  const { rules, cells } = challenge;\n  const row = cells[n];\n  const { birth, survival } = rules;\n  return row.map((_, i) => {\n    const neighborStates = getNeighbors(n, i, cells).map(\n      neighbor => cells[neighbor.x][neighbor.y]\n    );\n    const aliveCount = neighborStates.filter(cell => cell === 1).length;\n\n    // return state of next cell at [n][i] = row[i]\n    if (row[i] === 1)\n      return survival.includes(aliveCount) ? 1 : 0;\n    else return birth.includes(aliveCount) ? 1 : 0;\n  });\n}\n\nconst getNeighbors = (row, col, cells) => {\n  let neighbors = [];\n  const size = cells.length;\n  for (let i = row - 1; i <= row + 1; i++) {\n    for (let j = col - 1; j <= col + 1; j++) {\n      if (row === i && col === j) { }\n      else if (i >= 0 && j >= 0 && i < size && j < cells[j].length)\n        neighbors.push({ x: i, y: j });\n    }\n  }\n  return neighbors;\n}","import axios from \"axios\";\nimport { GET_CHALLENGE, SET_PATH, SET_RESULT } from \"./constants\";\nconst domain = \"https://api.noopschallenge.com\";\nconst path = \"/automatabot/challenges/start\"; //   or new\nconst headers = { \"content-type\": \"application/json\" };\n\nexport function getGame() {\n  const PATH = `${domain}${path}`;\n  return dispatch => {\n    axios\n      .get(PATH, { headers })\n      .then(response => {\n        // console.log(response.data);\n        dispatch({\n          type: GET_CHALLENGE,\n          challenge: response.data.challenge\n        });\n        dispatch({\n          type: SET_PATH,\n          data: response.data.challengePath\n        });\n      })\n      .catch(error => console.log(error));\n  };\n}\n\nexport function sendGame(url, data) {\n  return dispatch => {\n    axios.post(url, data, { headers })\n      .then(response => {\n        console.log(response);\n        dispatch({type: SET_RESULT,\n        data: response.result})\n      })\n      .catch(error => console.log(error));\n  }\n}\n","// TODO: - age to n\n//       - performance optimze (no violation msg)\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { CellGrid, getNextBoard } from \"./GameBoard\"\nimport { getGame, sendGame } from \"../actions\";\n\n// handleSend = () => {\n//   // deconstruct from state\n//   const { url, automata } = this.state;\n//   const { board } = automata;\n//   return this.props.handleSend(url, board);\n// };\n\n\nclass GameController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { running: false, generation: 0 };\n    this.timer = undefined;\n    this.age = 0;\n  }\n\n  handleSend = () => {\n    // deconstruct from state\n    const { url, challenge } = this.state;\n    const { cells } = challenge;\n    this.props.sendGame(url, { cells });\n  };\n  updateBoard = () => {\n    const { challenge, generation } = this.state;\n    Promise.resolve(getNextBoard(challenge)).then(challenge => {\n      const gen = generation + 1;\n      this.setState({ challenge, generation: gen })\n    })\n  }\n\n  tick = () => {\n    const { running } = this.state;\n\n    if (!this.timer && running) {\n      this.timer = setInterval(this.updateBoard, 100)\n    }\n    else { this.tock() }\n  }\n\n  tock() { clearInterval(this.timer) }\n\n  ageToCompletion = () =>  {\n    const { challenge, generation } = this.state;\n      if(generation < challenge.generation){\n        this.updateBoard().then(this.ageToCompletion())\n      }\n    }\n\n\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.Challenge !== prevProps.Challenge && this.props.Challenge) {\n      this.setState({ challenge: this.props.Challenge });\n    }\n    if (prevState.running !== this.state.running) {\n      this.tick();\n    }\n  }\n\n  // on mount: initialize and run\n  componentDidMount() {\n    this.props.getGame();\n  }\n  handleRun = () => {\n    const { running } = this.state\n    this.setState({ running: !running })\n  }\n\n  render() {\n    const { challenge, running } = this.state;\n    const cells = challenge ? challenge.cells : null;\n    const ageTo = challenge ? challenge.generations : 0;\n    return (\n      <React.Fragment>\n        <CellGrid cells={cells} />\n        {/* <GameBoard challenge={challenge} running={running} /> */}\n        <button onClick={this.handleSend}>send</button>\n        <button onClick={this.handleRun}>{running ? 'pause' : 'start'}</button>\n        {/* <button onClick={this.ageToCompletion}>{`age to ${ageTo}`}</button> */}\n\n      </React.Fragment>\n    );\n  }\n}\n// export default Game;\nfunction mapStateToProps(state) {\n  return {\n    Challenge: state.challenge\n  };\n}\nexport default connect(\n  mapStateToProps,\n  { getGame, sendGame }\n)(GameController);\n","import React, {useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport ReduxThunk from \"redux-thunk\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport GameController from \"./components/GameController\";\nimport \"./Game.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameController />\n    </div>\n  );\n}\nconst rootElement = document.getElementById(\"root\");\nconst storeWithThunk = createStore(\n  rootReducer,\n  {},\n  applyMiddleware(ReduxThunk)\n);\nReactDOM.render(\n  <Provider store={storeWithThunk}>\n    <App />\n  </Provider>,\n  rootElement\n);\n","import { GET_CHALLENGE, SET_PATH, SET_RESULT } from \"../constants\";\n\n//  setup for generic reducer configuration\nexport default function(state = { challenge: {}, path: undefined, result: undefined }, action) {\n  switch (action.type) {\n    case GET_CHALLENGE:\n      return { ...state, challenge: action.challenge };\n    case SET_PATH:\n      return { ...state, path: action.data };\n    case SET_RESULT:\n      return { ...state, result: action.data };\n    default:\n      return state;\n  }\n}\n"],"sourceRoot":""}